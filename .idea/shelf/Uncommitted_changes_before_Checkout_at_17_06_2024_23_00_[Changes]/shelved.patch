Index: popacket-service/src/test/java/popacketservice/popacketservice/ShipmentServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package popacketservice.popacketservice.service;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\nimport popacketservice.popacketservice.mapper.ShipmentMapper;\r\nimport popacketservice.popacketservice.model.dto.ShipmentResponseDTO;\r\nimport popacketservice.popacketservice.model.entity.Shipment;\r\nimport popacketservice.popacketservice.repository.ShipmentRepository;\r\n\r\nimport java.util.Optional;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport static org.mockito.ArgumentMatchers.any;\r\nimport static org.mockito.ArgumentMatchers.anyLong;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass ShipmentServiceTest {\r\n\r\n    @Mock\r\n    private ShipmentRepository shipmentRepository;\r\n\r\n    @Mock\r\n    private ShipmentMapper shipmentMapper;\r\n\r\n    @InjectMocks\r\n    private ShipmentService shipmentService;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n    }\r\n\r\n    @Test\r\n    void cancelShipmentById_Success() {\r\n        // Arrange\r\n        Long shipmentId = 1L;\r\n        Shipment shipment = new Shipment();\r\n        shipment.setId(shipmentId);\r\n        shipment.setStatus(\"pendiente\");\r\n\r\n        ShipmentResponseDTO shipmentResponseDTO = new ShipmentResponseDTO();\r\n        shipmentResponseDTO.setId(shipmentId);\r\n        shipmentResponseDTO.setStatus(\"cancelado\");\r\n\r\n        when(shipmentRepository.getShipmentById(anyLong())).thenReturn(Optional.of(shipment));\r\n        when(shipmentMapper.convertToDTO(any(Shipment.class))).thenReturn(shipmentResponseDTO);\r\n\r\n        // Act\r\n        ShipmentResponseDTO result = shipmentService.cancelShipmentById(shipmentId);\r\n\r\n        // Assert\r\n        assertEquals(\"cancelado\", result.getStatus());\r\n        verify(shipmentRepository, times(1)).getShipmentById(shipmentId);\r\n        verify(shipmentRepository, times(1)).save(any(Shipment.class));\r\n        verify(shipmentMapper, times(1)).convertToDTO(any(Shipment.class));\r\n    }\r\n\r\n    @Test\r\n    void cancelShipmentById_NotFound() {\r\n        // Arrange\r\n        Long shipmentId = 1L;\r\n        when(shipmentRepository.getShipmentById(anyLong())).thenReturn(Optional.empty());\r\n\r\n        // Act & Assert\r\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\r\n            shipmentService.cancelShipmentById(shipmentId);\r\n        });\r\n\r\n        assertEquals(\"Shipment not found with id \" + shipmentId, exception.getMessage());\r\n        verify(shipmentRepository, times(1)).getShipmentById(shipmentId);\r\n        verify(shipmentRepository, times(0)).save(any(Shipment.class));\r\n        verify(shipmentMapper, times(0)).convertToDTO(any(Shipment.class));\r\n    }\r\n}
===================================================================
diff --git a/popacket-service/src/test/java/popacketservice/popacketservice/ShipmentServiceTest.java b/popacket-service/src/test/java/popacketservice/popacketservice/ShipmentServiceTest.java
--- a/popacket-service/src/test/java/popacketservice/popacketservice/ShipmentServiceTest.java	
+++ b/popacket-service/src/test/java/popacketservice/popacketservice/ShipmentServiceTest.java	
@@ -1,78 +1,239 @@
-package popacketservice.popacketservice.service;
+package popacketservice.popacketservice;
+
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+
+import org.mockito.junit.jupiter.MockitoExtension;
+import popacketservice.popacketservice.exception.ConflictException;
 import popacketservice.popacketservice.mapper.ShipmentMapper;
+import popacketservice.popacketservice.model.dto.ShipmentRequestDTO;
 import popacketservice.popacketservice.model.dto.ShipmentResponseDTO;
-import popacketservice.popacketservice.model.entity.Shipment;
-import popacketservice.popacketservice.repository.ShipmentRepository;
+import popacketservice.popacketservice.model.entity.*;
+import popacketservice.popacketservice.model.entity.Package;
+import popacketservice.popacketservice.repository.*;
+
+import popacketservice.popacketservice.service.ShipmentService;
+import static org.mockito.ArgumentMatchers.any;
+
 
 import java.util.Optional;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.*;
+
+
 import static org.mockito.ArgumentMatchers.any;
+
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.*;
 
-class ShipmentServiceTest {
+@ExtendWith(MockitoExtension.class)
+public class ShipmentServiceTest {
 
     @Mock
     private ShipmentRepository shipmentRepository;
+  
+    @Mock
+    private LocationRepository locationRepository;
 
+    @Mock
+    private PackageRepository packageRepository;
+
+    @Mock
+    private DeliveryPersonRepository deliveryPersonRepository;
+
     @Mock
     private ShipmentMapper shipmentMapper;
 
+    @Mock
+    private LocationRepository locationRepository;
+
+    @Mock
+    private PackageRepository packageRepository;
+
+    @Mock
+    private DeliveryPersonRepository deliveryPersonRepository;
+
     @InjectMocks
     private ShipmentService shipmentService;
 
     @BeforeEach
-    void setUp() {
+    public void setUp() {
+
         MockitoAnnotations.openMocks(this);
     }
 
     @Test
-    void cancelShipmentById_Success() {
-        // Arrange
-        Long shipmentId = 1L;
+    public void testMakeShipment_Success() {
+        // Given
+        ShipmentRequestDTO shipmentRequestDTO = new ShipmentRequestDTO();
+        shipmentRequestDTO.setDestinationLocationId(1L);
+        shipmentRequestDTO.setOriginLocationId(2L);
+        shipmentRequestDTO.setPackageId(3L);
+        shipmentRequestDTO.setDeliveryPersonId(4L);
+
+        Location destinationLocation = new Location();
+        Location originLocation = new Location();
+        Package pack = new Package();
+        DeliveryPerson deliveryPerson = new DeliveryPerson();
         Shipment shipment = new Shipment();
-        shipment.setId(shipmentId);
-        shipment.setStatus("pendiente");
-
         ShipmentResponseDTO shipmentResponseDTO = new ShipmentResponseDTO();
-        shipmentResponseDTO.setId(shipmentId);
-        shipmentResponseDTO.setStatus("cancelado");
 
-        when(shipmentRepository.getShipmentById(anyLong())).thenReturn(Optional.of(shipment));
-        when(shipmentMapper.convertToDTO(any(Shipment.class))).thenReturn(shipmentResponseDTO);
+        // When
+        when(shipmentRepository.ifExistsByPackageID(shipmentRequestDTO.getPackageId())).thenReturn(false);
+        when(locationRepository.findById(shipmentRequestDTO.getDestinationLocationId())).thenReturn(Optional.of(destinationLocation));
+        when(locationRepository.findById(shipmentRequestDTO.getOriginLocationId())).thenReturn(Optional.of(originLocation));
+        when(packageRepository.findById(shipmentRequestDTO.getPackageId())).thenReturn(Optional.of(pack));
+        when(deliveryPersonRepository.findById(shipmentRequestDTO.getDeliveryPersonId())).thenReturn(Optional.of(deliveryPerson));
+        when(shipmentMapper.convertToEntity(shipmentRequestDTO)).thenReturn(shipment);
+        when(shipmentRepository.save(shipment)).thenReturn(shipment);
+        when(shipmentMapper.convertToDTO(shipment)).thenReturn(shipmentResponseDTO);
 
-        // Act
-        ShipmentResponseDTO result = shipmentService.cancelShipmentById(shipmentId);
+        // Then
+        ShipmentResponseDTO result = shipmentService.makeShipment(shipmentRequestDTO);
 
-        // Assert
-        assertEquals("cancelado", result.getStatus());
-        verify(shipmentRepository, times(1)).getShipmentById(shipmentId);
-        verify(shipmentRepository, times(1)).save(any(Shipment.class));
-        verify(shipmentMapper, times(1)).convertToDTO(any(Shipment.class));
+        assertNotNull(result);
+        verify(shipmentRepository).save(shipment);
     }
 
     @Test
-    void cancelShipmentById_NotFound() {
-        // Arrange
+    public void testMakeShipment_Conflict() {
+        // Given
+        ShipmentRequestDTO shipmentRequestDTO = new ShipmentRequestDTO();
+        shipmentRequestDTO.setPackageId(3L);
+
+        // When
+        when(shipmentRepository.ifExistsByPackageID(shipmentRequestDTO.getPackageId())).thenReturn(true);
+
+        // Then
+        ConflictException exception = assertThrows(ConflictException.class, () -> {
+            shipmentService.makeShipment(shipmentRequestDTO);
+        });
+
+        assertEquals("El envio ya se encuentra registrado", exception.getMessage());
+        verify(shipmentRepository, never()).save(any(Shipment.class));
+    }
+
+    @Test
+    public void testMakeShipment_DestinationLocationNotFound() {
+        // Given
+        ShipmentRequestDTO shipmentRequestDTO = new ShipmentRequestDTO();
+        shipmentRequestDTO.setDestinationLocationId(1L);
+
+        // When
+        when(shipmentRepository.ifExistsByPackageID(shipmentRequestDTO.getPackageId())).thenReturn(false);
+        when(locationRepository.findById(shipmentRequestDTO.getDestinationLocationId())).thenReturn(Optional.empty());
+
+        // Then
+        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
+            shipmentService.makeShipment(shipmentRequestDTO);
+        });
+
+        assertEquals("Destino no encontrado", exception.getMessage());
+        verify(shipmentRepository, never()).save(any(Shipment.class));
+    }
+
+    @Test
+    public void testMakeShipment_OriginLocationNotFound() {
+        // Given
+        ShipmentRequestDTO shipmentRequestDTO = new ShipmentRequestDTO();
+        Location destinationLocation = new Location();
+        shipmentRequestDTO.setOriginLocationId(45L);
+
+        // When
+        when(shipmentRepository.ifExistsByPackageID(shipmentRequestDTO.getPackageId())).thenReturn(false);
+        when(locationRepository.findById(shipmentRequestDTO.getDestinationLocationId())).thenReturn(Optional.of(destinationLocation));
+        when(locationRepository.findById(shipmentRequestDTO.getOriginLocationId())).thenReturn(Optional.empty());
+
+        // Then
+        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
+            shipmentService.makeShipment(shipmentRequestDTO);
+        });
+
+        assertEquals("Origen no encontrado", exception.getMessage());
+        verify(shipmentRepository, never()).save(any(Shipment.class));
+    }
+
+    @Test
+    public void testMakeShipment_PackageNotFound() {
+        // Given
+        ShipmentRequestDTO shipmentRequestDTO = new ShipmentRequestDTO();
+        Location destinationLocation = new Location();
+        Location originLocation = new Location();
+        shipmentRequestDTO.setPackageId(3L);
+
+        // When
+        when(shipmentRepository.ifExistsByPackageID(shipmentRequestDTO.getPackageId())).thenReturn(false);
+        when(locationRepository.findById(shipmentRequestDTO.getDestinationLocationId())).thenReturn(Optional.of(destinationLocation));
+        when(locationRepository.findById(shipmentRequestDTO.getOriginLocationId())).thenReturn(Optional.of(originLocation));
+        when(packageRepository.findById(shipmentRequestDTO.getPackageId())).thenReturn(Optional.empty());
+
+        // Then
+        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
+            shipmentService.makeShipment(shipmentRequestDTO);
+        });
+
+        assertEquals("Paquete no encontrado", exception.getMessage());
+        verify(shipmentRepository, never()).save(any(Shipment.class));
+    }
+
+    @Test
+    public void testMakeShipment_DeliveryPersonNotFound() {
+        // Given
+        ShipmentRequestDTO shipmentRequestDTO = new ShipmentRequestDTO();
+        Location destinationLocation = new Location();
+        Location originLocation = new Location();
+        Package pack = new Package();
+        shipmentRequestDTO.setDeliveryPersonId(4L);
+
+        // When
+        when(shipmentRepository.ifExistsByPackageID(shipmentRequestDTO.getPackageId())).thenReturn(false);
+        when(locationRepository.findById(shipmentRequestDTO.getDestinationLocationId())).thenReturn(Optional.of(destinationLocation));
+        when(locationRepository.findById(shipmentRequestDTO.getOriginLocationId())).thenReturn(Optional.of(originLocation));
+        when(packageRepository.findById(shipmentRequestDTO.getPackageId())).thenReturn(Optional.of(pack));
+        when(deliveryPersonRepository.findById(shipmentRequestDTO.getDeliveryPersonId())).thenReturn(Optional.empty());
+
+        // Then
+        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
+            shipmentService.makeShipment(shipmentRequestDTO);
+        });
+
+        assertEquals("Persona de entrega no encontrada", exception.getMessage());
+        verify(shipmentRepository, never()).save(any(Shipment.class));
+    }
+}
+   @Test
+   public void getStatusShipmentById_Success() {
+        Long shipmentId = 1L;
+        Object[] expectedShipmentStatus = {"En camino", "2024-06-10"};
+
+        when(shipmentRepository.getStatusShipmentByIdOb(anyLong())).thenReturn(Optional.of(expectedShipmentStatus));
+
+
+        Object[] result = shipmentService.getStatusShipmentById(shipmentId);
+
+
+        assertArrayEquals(expectedShipmentStatus, result);
+        verify(shipmentRepository, times(1)).getStatusShipmentByIdOb(shipmentId);
+    }
+
+    @Test
+    public void getStatusShipmentById_NotFound() {
+
         Long shipmentId = 1L;
-        when(shipmentRepository.getShipmentById(anyLong())).thenReturn(Optional.empty());
+
+        when(shipmentRepository.getStatusShipmentByIdOb(anyLong())).thenReturn(Optional.empty());
 
-        // Act & Assert
+
         RuntimeException exception = assertThrows(RuntimeException.class, () -> {
-            shipmentService.cancelShipmentById(shipmentId);
+            shipmentService.getStatusShipmentById(shipmentId);
         });
 
-        assertEquals("Shipment not found with id " + shipmentId, exception.getMessage());
-        verify(shipmentRepository, times(1)).getShipmentById(shipmentId);
-        verify(shipmentRepository, times(0)).save(any(Shipment.class));
-        verify(shipmentMapper, times(0)).convertToDTO(any(Shipment.class));
+        assertEquals("El id del Envio no existe", exception.getMessage());
+        verify(shipmentRepository, times(1)).getStatusShipmentByIdOb(shipmentId);
     }
-}
\ No newline at end of file
+}
